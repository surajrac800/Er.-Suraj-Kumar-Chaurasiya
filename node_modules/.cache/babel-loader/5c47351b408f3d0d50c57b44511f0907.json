{"ast":null,"code":"import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n  const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n\n  for (const key in props) {\n    if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n      const targetKey = transformPropOrder.indexOf(key) !== -1 ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1) : key;\n      newValues[targetKey] = props[key];\n    }\n  }\n\n  return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs"],"names":["isMotionValue","scrapeMotionValuesFromProps","scrapeMotionValuesFromProps$1","transformPropOrder","props","prevProps","newValues","key","targetKey","indexOf","charAt","toUpperCase","substring"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0CAA9B;AACA,SAASC,2BAA2B,IAAIC,6BAAxC,QAA6E,2CAA7E;AACA,SAASC,kBAAT,QAAmC,gCAAnC;;AAEA,SAASF,2BAAT,CAAqCG,KAArC,EAA4CC,SAA5C,EAAuD;AACnD,QAAMC,SAAS,GAAGJ,6BAA6B,CAACE,KAAD,EAAQC,SAAR,CAA/C;;AACA,OAAK,MAAME,GAAX,IAAkBH,KAAlB,EAAyB;AACrB,QAAIJ,aAAa,CAACI,KAAK,CAACG,GAAD,CAAN,CAAb,IAA6BP,aAAa,CAACK,SAAS,CAACE,GAAD,CAAV,CAA9C,EAAgE;AAC5D,YAAMC,SAAS,GAAGL,kBAAkB,CAACM,OAAnB,CAA2BF,GAA3B,MAAoC,CAAC,CAArC,GACZ,SAASA,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAT,GAAuCJ,GAAG,CAACK,SAAJ,CAAc,CAAd,CAD3B,GAEZL,GAFN;AAGAD,MAAAA,SAAS,CAACE,SAAD,CAAT,GAAuBJ,KAAK,CAACG,GAAD,CAA5B;AACH;AACJ;;AACD,SAAOD,SAAP;AACH;;AAED,SAASL,2BAAT","sourcesContent":["import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps);\n    for (const key in props) {\n        if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n"]},"metadata":{},"sourceType":"module"}