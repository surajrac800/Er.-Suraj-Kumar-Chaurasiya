{"ast":null,"code":"import { frame, cancelFrame } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.scheduleRender = () => frame.render(this.render, false, true);\n\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {});\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n\n\n  scrapeMotionValuesFromProps(_props, _prevProps) {\n    return {};\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      this.features[key].unmount();\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.update(this.notifyUpdate, false, true);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  loadFeatures(_ref2, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n    let {\n      children,\n      ...renderedProps\n    } = _ref2;\n    let ProjectionNodeConstructor;\n    let MeasureLayout;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n\n    if (process.env.NODE_ENV !== \"production\" && preloadedFeatures && isStrict) {\n      const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);\n    }\n\n    for (let i = 0; i < numFeatures; i++) {\n      const name = featureNames[i];\n      const {\n        isEnabled,\n        Feature: FeatureConstructor,\n        ProjectionNode,\n        MeasureLayout: MeasureLayoutComponent\n      } = featureDefinitions[name];\n      if (ProjectionNode) ProjectionNodeConstructor = ProjectionNode;\n\n      if (isEnabled(renderedProps)) {\n        if (!this.features[name] && FeatureConstructor) {\n          this.features[name] = new FeatureConstructor(this);\n        }\n\n        if (MeasureLayoutComponent) {\n          MeasureLayout = MeasureLayoutComponent;\n        }\n      }\n    }\n\n    if (!this.projection && ProjectionNodeConstructor) {\n      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n      const {\n        layoutId,\n        layout,\n        drag,\n        dragConstraints,\n        layoutScroll,\n        layoutRoot\n      } = renderedProps;\n      this.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: this,\n        scheduleRender: () => this.scheduleRender(),\n\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialLayoutGroupConfig,\n        layoutScroll,\n        layoutRoot\n      });\n    }\n\n    return MeasureLayout;\n  }\n\n  updateFeatures() {\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature.isMounted) {\n        feature.update();\n      } else {\n        feature.mount();\n        feature.isMounted = true;\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.options, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Make a target animatable by Popmotion. For instance, if we're\n   * trying to animate width from 100px to 100vw we need to measure 100vw\n   * in pixels to determine what we really need to animate to. This is also\n   * pluggable to support Framer's custom value types like Color,\n   * and CSS variables.\n   */\n\n\n  makeTargetAnimatable(target) {\n    let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listener = props[\"on\" + key];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n\n  getVariantContext() {\n    let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (startAtParent) {\n      return this.parent ? this.parent.getVariantContext() : undefined;\n    }\n\n    if (!this.isControllingVariants) {\n      const context = this.parent ? this.parent.getVariantContext() || {} : {};\n\n      if (this.props.initial !== undefined) {\n        context.initial = this.props.initial;\n      }\n\n      return context;\n    }\n\n    const context = {};\n\n    for (let i = 0; i < numVariantProps; i++) {\n      const name = variantProps[i];\n      const prop = this.props[name];\n\n      if (isVariantLabel(prop) || prop === false) {\n        context[name] = prop;\n      }\n    }\n\n    return context;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    if (value !== this.values.get(key)) {\n      this.removeValue(key);\n      this.bindToMotionValue(key, value);\n    }\n\n    this.values.set(key, value);\n    this.latestValues[key] = value.get();\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key) {\n    return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["frame","cancelFrame","warning","invariant","createBox","isRefObject","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","transformProps","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","warnOnce","featureDefinitions","variantProps","visualElementStore","featureNames","Object","keys","numFeatures","length","propEventHandlers","numVariantProps","VisualElement","constructor","parent","props","presenceContext","reducedMotionConfig","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","variantChildren","manuallyAnimateOnMount","Boolean","willChange","initialMotionValues","scrapeMotionValuesFromProps","key","value","undefined","set","add","_props","_prevProps","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","update","unmount","delete","remove","clear","valueIsTransform","has","removeOnChange","on","latestValue","onUpdate","isTransformDirty","removeOnRenderRequest","sortNodePosition","other","sortInstanceNodePosition","type","loadFeatures","isStrict","preloadedFeatures","initialLayoutGroupConfig","renderedProps","ProjectionNodeConstructor","MeasureLayout","strictMessage","ignoreStrict","i","name","isEnabled","Feature","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","layoutId","layout","drag","dragConstraints","layoutScroll","layoutRoot","setOptions","alwaysMeasureLayout","visualElement","animationType","initialPromotionConfig","updateFeatures","feature","isMounted","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","makeTargetAnimatable","target","canMutate","makeTargetAnimatableFromInstance","transformTemplate","prevProps","prevPresenceContext","listener","handleChildMotionValue","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","getVariantContext","startAtParent","context","prop","child","closestVariantNode","addValue","get","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","owner","readValue","readValueFromInstance","setBaseTarget","getBaseTarget","_a","valueFromInitial","getBaseTargetFromProps","eventName","callback","args"],"mappings":"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","sourcesContent":["import { frame, cancelFrame } from '../frameloop/index.mjs';\nimport { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}