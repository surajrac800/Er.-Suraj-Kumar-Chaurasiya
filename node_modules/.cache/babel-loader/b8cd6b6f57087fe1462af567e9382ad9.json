{"ast":null,"code":"import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n  sortInstanceNodePosition(a, b) {\n    /**\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\n     * to true if b preceeds a.\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  }\n\n  getBaseTargetFromProps(props, key) {\n    return props.style ? props.style[key] : undefined;\n  }\n\n  removeValueFromRenderState(key, _ref) {\n    let {\n      vars,\n      style\n    } = _ref;\n    delete vars[key];\n    delete style[key];\n  }\n\n  makeTargetAnimatableFromInstance(_ref2, _ref3, isMounted) {\n    let {\n      transition,\n      transitionEnd,\n      ...target\n    } = _ref2;\n    let {\n      transformValues\n    } = _ref3;\n    let origin = getOrigin(target, transition || {}, this);\n    /**\n     * If Framer has provided a function to convert `Color` etc value types, convert them\n     */\n\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n\n    if (isMounted) {\n      checkTargetForNewValues(this, target, origin);\n      const parsed = parseDomVariant(this, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n\n    return {\n      transition,\n      transitionEnd,\n      ...target\n    };\n  }\n\n}\n\nexport { DOMVisualElement };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs"],"names":["getOrigin","checkTargetForNewValues","parseDomVariant","VisualElement","DOMVisualElement","sortInstanceNodePosition","a","b","compareDocumentPosition","getBaseTargetFromProps","props","key","style","undefined","removeValueFromRenderState","vars","makeTargetAnimatableFromInstance","isMounted","transition","transitionEnd","target","transformValues","origin","parsed"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,uBAApB,QAAmD,sBAAnD;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,gBAAN,SAA+BD,aAA/B,CAA6C;AACzCE,EAAAA,wBAAwB,CAACC,CAAD,EAAIC,CAAJ,EAAO;AAC3B;AACR;AACA;AACA;AACA;AACQ,WAAOD,CAAC,CAACE,uBAAF,CAA0BD,CAA1B,IAA+B,CAA/B,GAAmC,CAAnC,GAAuC,CAAC,CAA/C;AACH;;AACDE,EAAAA,sBAAsB,CAACC,KAAD,EAAQC,GAAR,EAAa;AAC/B,WAAOD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,CAAYD,GAAZ,CAAd,GAAiCE,SAAxC;AACH;;AACDC,EAAAA,0BAA0B,CAACH,GAAD,QAAuB;AAAA,QAAjB;AAAEI,MAAAA,IAAF;AAAQH,MAAAA;AAAR,KAAiB;AAC7C,WAAOG,IAAI,CAACJ,GAAD,CAAX;AACA,WAAOC,KAAK,CAACD,GAAD,CAAZ;AACH;;AACDK,EAAAA,gCAAgC,eAAgEC,SAAhE,EAA2E;AAAA,QAA1E;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,aAAd;AAA6B,SAAGC;AAAhC,KAA0E;AAAA,QAAhC;AAAEC,MAAAA;AAAF,KAAgC;AACvG,QAAIC,MAAM,GAAGtB,SAAS,CAACoB,MAAD,EAASF,UAAU,IAAI,EAAvB,EAA2B,IAA3B,CAAtB;AACA;AACR;AACA;;AACQ,QAAIG,eAAJ,EAAqB;AACjB,UAAIF,aAAJ,EACIA,aAAa,GAAGE,eAAe,CAACF,aAAD,CAA/B;AACJ,UAAIC,MAAJ,EACIA,MAAM,GAAGC,eAAe,CAACD,MAAD,CAAxB;AACJ,UAAIE,MAAJ,EACIA,MAAM,GAAGD,eAAe,CAACC,MAAD,CAAxB;AACP;;AACD,QAAIL,SAAJ,EAAe;AACXhB,MAAAA,uBAAuB,CAAC,IAAD,EAAOmB,MAAP,EAAeE,MAAf,CAAvB;AACA,YAAMC,MAAM,GAAGrB,eAAe,CAAC,IAAD,EAAOkB,MAAP,EAAeE,MAAf,EAAuBH,aAAvB,CAA9B;AACAA,MAAAA,aAAa,GAAGI,MAAM,CAACJ,aAAvB;AACAC,MAAAA,MAAM,GAAGG,MAAM,CAACH,MAAhB;AACH;;AACD,WAAO;AACHF,MAAAA,UADG;AAEHC,MAAAA,aAFG;AAGH,SAAGC;AAHA,KAAP;AAKH;;AAxCwC;;AA2C7C,SAAShB,gBAAT","sourcesContent":["import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n"]},"metadata":{},"sourceType":"module"}