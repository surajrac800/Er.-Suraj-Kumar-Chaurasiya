{"ast":null,"code":"import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst asyncHandler = handler => (event, info) => {\n  if (handler) {\n    frame.update(() => handler(event, info));\n  }\n};\n\nclass PanGesture extends Feature {\n  constructor() {\n    super(...arguments);\n    this.removePointerDownListener = noop;\n  }\n\n  onPointerDown(pointerDownEvent) {\n    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n      transformPagePoint: this.node.getTransformPagePoint()\n    });\n  }\n\n  createPanHandlers() {\n    const {\n      onPanSessionStart,\n      onPanStart,\n      onPan,\n      onPanEnd\n    } = this.node.getProps();\n    return {\n      onSessionStart: asyncHandler(onPanSessionStart),\n      onStart: asyncHandler(onPanStart),\n      onMove: onPan,\n      onEnd: (event, info) => {\n        delete this.session;\n\n        if (onPanEnd) {\n          frame.update(() => onPanEnd(event, info));\n        }\n      }\n    };\n  }\n\n  mount() {\n    this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", event => this.onPointerDown(event));\n  }\n\n  update() {\n    this.session && this.session.updateHandlers(this.createPanHandlers());\n  }\n\n  unmount() {\n    this.removePointerDownListener();\n    this.session && this.session.end();\n  }\n\n}\n\nexport { PanGesture };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/gestures/pan/index.mjs"],"names":["PanSession","addPointerEvent","Feature","noop","frame","asyncHandler","handler","event","info","update","PanGesture","constructor","arguments","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","transformPagePoint","node","getTransformPagePoint","onPanSessionStart","onPanStart","onPan","onPanEnd","getProps","onSessionStart","onStart","onMove","onEnd","mount","current","updateHandlers","unmount","end"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,KAAT,QAAsB,2BAAtB;;AAEA,MAAMC,YAAY,GAAIC,OAAD,IAAa,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC/C,MAAIF,OAAJ,EAAa;AACTF,IAAAA,KAAK,CAACK,MAAN,CAAa,MAAMH,OAAO,CAACC,KAAD,EAAQC,IAAR,CAA1B;AACH;AACJ,CAJD;;AAKA,MAAME,UAAN,SAAyBR,OAAzB,CAAiC;AAC7BS,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,yBAAL,GAAiCV,IAAjC;AACH;;AACDW,EAAAA,aAAa,CAACC,gBAAD,EAAmB;AAC5B,SAAKC,OAAL,GAAe,IAAIhB,UAAJ,CAAee,gBAAf,EAAiC,KAAKE,iBAAL,EAAjC,EAA2D;AAAEC,MAAAA,kBAAkB,EAAE,KAAKC,IAAL,CAAUC,qBAAV;AAAtB,KAA3D,CAAf;AACH;;AACDH,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEI,MAAAA,iBAAF;AAAqBC,MAAAA,UAArB;AAAiCC,MAAAA,KAAjC;AAAwCC,MAAAA;AAAxC,QAAqD,KAAKL,IAAL,CAAUM,QAAV,EAA3D;AACA,WAAO;AACHC,MAAAA,cAAc,EAAErB,YAAY,CAACgB,iBAAD,CADzB;AAEHM,MAAAA,OAAO,EAAEtB,YAAY,CAACiB,UAAD,CAFlB;AAGHM,MAAAA,MAAM,EAAEL,KAHL;AAIHM,MAAAA,KAAK,EAAE,CAACtB,KAAD,EAAQC,IAAR,KAAiB;AACpB,eAAO,KAAKQ,OAAZ;;AACA,YAAIQ,QAAJ,EAAc;AACVpB,UAAAA,KAAK,CAACK,MAAN,CAAa,MAAMe,QAAQ,CAACjB,KAAD,EAAQC,IAAR,CAA3B;AACH;AACJ;AATE,KAAP;AAWH;;AACDsB,EAAAA,KAAK,GAAG;AACJ,SAAKjB,yBAAL,GAAiCZ,eAAe,CAAC,KAAKkB,IAAL,CAAUY,OAAX,EAAoB,aAApB,EAAoCxB,KAAD,IAAW,KAAKO,aAAL,CAAmBP,KAAnB,CAA9C,CAAhD;AACH;;AACDE,EAAAA,MAAM,GAAG;AACL,SAAKO,OAAL,IAAgB,KAAKA,OAAL,CAAagB,cAAb,CAA4B,KAAKf,iBAAL,EAA5B,CAAhB;AACH;;AACDgB,EAAAA,OAAO,GAAG;AACN,SAAKpB,yBAAL;AACA,SAAKG,OAAL,IAAgB,KAAKA,OAAL,CAAakB,GAAb,EAAhB;AACH;;AA/B4B;;AAkCjC,SAASxB,UAAT","sourcesContent":["import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { frame } from '../../frameloop/index.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n"]},"metadata":{},"sourceType":"module"}