{"ast":null,"code":"class GroupPlaybackControls {\n  constructor(animations) {\n    this.animations = animations.filter(Boolean);\n  }\n\n  then(onResolve, onReject) {\n    return Promise.all(this.animations).then(onResolve).catch(onReject);\n  }\n  /**\n   * TODO: Filter out cancelled or stopped animations before returning\n   */\n\n\n  getAll(propName) {\n    return this.animations[0][propName];\n  }\n\n  setAll(propName, newValue) {\n    for (let i = 0; i < this.animations.length; i++) {\n      this.animations[i][propName] = newValue;\n    }\n  }\n\n  get time() {\n    return this.getAll(\"time\");\n  }\n\n  set time(time) {\n    this.setAll(\"time\", time);\n  }\n\n  get speed() {\n    return this.getAll(\"speed\");\n  }\n\n  set speed(speed) {\n    this.setAll(\"speed\", speed);\n  }\n\n  get duration() {\n    let max = 0;\n\n    for (let i = 0; i < this.animations.length; i++) {\n      max = Math.max(max, this.animations[i].duration);\n    }\n\n    return max;\n  }\n\n  runAll(methodName) {\n    this.animations.forEach(controls => controls[methodName]());\n  }\n\n  play() {\n    this.runAll(\"play\");\n  }\n\n  pause() {\n    this.runAll(\"pause\");\n  }\n\n  stop() {\n    this.runAll(\"stop\");\n  }\n\n  cancel() {\n    this.runAll(\"cancel\");\n  }\n\n  complete() {\n    this.runAll(\"complete\");\n  }\n\n}\n\nexport { GroupPlaybackControls };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs"],"names":["GroupPlaybackControls","constructor","animations","filter","Boolean","then","onResolve","onReject","Promise","all","catch","getAll","propName","setAll","newValue","i","length","time","speed","duration","max","Math","runAll","methodName","forEach","controls","play","pause","stop","cancel","complete"],"mappings":"AAAA,MAAMA,qBAAN,CAA4B;AACxBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAU,CAACC,MAAX,CAAkBC,OAAlB,CAAlB;AACH;;AACDC,EAAAA,IAAI,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AACtB,WAAOC,OAAO,CAACC,GAAR,CAAY,KAAKP,UAAjB,EAA6BG,IAA7B,CAAkCC,SAAlC,EAA6CI,KAA7C,CAAmDH,QAAnD,CAAP;AACH;AACD;AACJ;AACA;;;AACII,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,WAAO,KAAKV,UAAL,CAAgB,CAAhB,EAAmBU,QAAnB,CAAP;AACH;;AACDC,EAAAA,MAAM,CAACD,QAAD,EAAWE,QAAX,EAAqB;AACvB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,UAAL,CAAgBc,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,WAAKb,UAAL,CAAgBa,CAAhB,EAAmBH,QAAnB,IAA+BE,QAA/B;AACH;AACJ;;AACO,MAAJG,IAAI,GAAG;AACP,WAAO,KAAKN,MAAL,CAAY,MAAZ,CAAP;AACH;;AACO,MAAJM,IAAI,CAACA,IAAD,EAAO;AACX,SAAKJ,MAAL,CAAY,MAAZ,EAAoBI,IAApB;AACH;;AACQ,MAALC,KAAK,GAAG;AACR,WAAO,KAAKP,MAAL,CAAY,OAAZ,CAAP;AACH;;AACQ,MAALO,KAAK,CAACA,KAAD,EAAQ;AACb,SAAKL,MAAL,CAAY,OAAZ,EAAqBK,KAArB;AACH;;AACW,MAARC,QAAQ,GAAG;AACX,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,UAAL,CAAgBc,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7CK,MAAAA,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASA,GAAT,EAAc,KAAKlB,UAAL,CAAgBa,CAAhB,EAAmBI,QAAjC,CAAN;AACH;;AACD,WAAOC,GAAP;AACH;;AACDE,EAAAA,MAAM,CAACC,UAAD,EAAa;AACf,SAAKrB,UAAL,CAAgBsB,OAAhB,CAAyBC,QAAD,IAAcA,QAAQ,CAACF,UAAD,CAAR,EAAtC;AACH;;AACDG,EAAAA,IAAI,GAAG;AACH,SAAKJ,MAAL,CAAY,MAAZ;AACH;;AACDK,EAAAA,KAAK,GAAG;AACJ,SAAKL,MAAL,CAAY,OAAZ;AACH;;AACDM,EAAAA,IAAI,GAAG;AACH,SAAKN,MAAL,CAAY,MAAZ;AACH;;AACDO,EAAAA,MAAM,GAAG;AACL,SAAKP,MAAL,CAAY,QAAZ;AACH;;AACDQ,EAAAA,QAAQ,GAAG;AACP,SAAKR,MAAL,CAAY,UAAZ;AACH;;AAtDuB;;AAyD5B,SAAStB,qBAAT","sourcesContent":["class GroupPlaybackControls {\n    constructor(animations) {\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    stop() {\n        this.runAll(\"stop\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n"]},"metadata":{},"sourceType":"module"}