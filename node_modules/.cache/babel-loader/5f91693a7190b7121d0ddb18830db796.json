{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = child => child.key || \"\";\n\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(child => {\n    const key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  const filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, child => {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nconst AnimatePresence = _ref => {\n  let {\n    children,\n    custom,\n    initial = true,\n    onExitComplete,\n    exitBeforeEnter,\n    presenceAffectsLayout = true,\n    mode = \"sync\"\n  } = _ref;\n  invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\"); // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n  const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n  const isMounted = useIsMounted(); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  const filteredChildren = onlyElements(children);\n  let childrenToRender = filteredChildren;\n  const exitingChildren = useRef(new Map()).current; // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  const presentChildren = useRef(childrenToRender); // A lookup table to quickly reference components by key\n\n  const allChildren = useRef(new Map()).current; // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  const isInitialRender = useRef(true);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(() => {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exitingChildren.clear();\n  });\n\n  if (isInitialRender.current) {\n    return React.createElement(React.Fragment, null, childrenToRender.map(child => React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      initial: initial ? undefined : false,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child)));\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  childrenToRender = [...childrenToRender]; // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n  const presentKeys = presentChildren.current.map(getChildKey);\n  const targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  const numPresent = presentKeys.length;\n\n  for (let i = 0; i < numPresent; i++) {\n    const key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n      exitingChildren.set(key, undefined);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (mode === \"wait\" && exitingChildren.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exitingChildren.forEach((component, key) => {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    const child = allChildren.get(key);\n    if (!child) return;\n    const insertionIndex = presentKeys.indexOf(key);\n    let exitingComponent = component;\n\n    if (!exitingComponent) {\n      const onExit = () => {\n        allChildren.delete(key);\n        exitingChildren.delete(key); // Remove this child from the present children\n\n        const removeIndex = presentChildren.current.findIndex(presentChild => presentChild.key === key);\n        presentChildren.current.splice(removeIndex, 1); // Defer re-rendering until all exiting children have indeed left\n\n        if (!exitingChildren.size) {\n          presentChildren.current = filteredChildren;\n          if (isMounted.current === false) return;\n          forceRender();\n          onExitComplete && onExitComplete();\n        }\n      };\n\n      exitingComponent = React.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: false,\n        onExitComplete: onExit,\n        custom: custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n      exitingChildren.set(key, exitingComponent);\n    }\n\n    childrenToRender.splice(insertionIndex, 0, exitingComponent);\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(child => {\n    const key = child.key;\n    return exitingChildren.has(key) ? child : React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n\n  return React.createElement(React.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map(child => cloneElement(child)));\n};\n\nexport { AnimatePresence };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"names":["React","useContext","useRef","cloneElement","Children","isValidElement","useForceUpdate","useIsMounted","PresenceChild","LayoutGroupContext","useIsomorphicLayoutEffect","useUnmountEffect","invariant","getChildKey","child","key","updateChildLookup","children","allChildren","forEach","set","onlyElements","filtered","push","AnimatePresence","custom","initial","onExitComplete","exitBeforeEnter","presenceAffectsLayout","mode","forceRender","isMounted","filteredChildren","childrenToRender","exitingChildren","Map","current","presentChildren","isInitialRender","clear","createElement","Fragment","map","isPresent","undefined","presentKeys","targetKeys","numPresent","length","i","indexOf","has","size","component","get","insertionIndex","exitingComponent","onExit","delete","removeIndex","findIndex","presentChild","splice","process","env","NODE_ENV","console","warn"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                allChildren.delete(key);\n                exitingChildren.delete(key);\n                // Remove this child from the present children\n                const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n                presentChildren.current.splice(removeIndex, 1);\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    presentChildren.current = filteredChildren;\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exitingChildren.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n"]},"metadata":{},"sourceType":"module"}