{"ast":null,"code":"import { elementTransitionEnd, now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    if (swiper.params.cssMode) return;\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    if (swiper.params.cssMode) return;\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    if (swiper.params.cssMode) return;\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/swiper/modules/free-mode/free-mode.js"],"names":["elementTransitionEnd","now","freeMode","swiper","extendParams","emit","once","enabled","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","onTouchStart","params","cssMode","translate","getTranslate","setTranslate","setTransition","touchEventsData","velocities","length","onTouchEnd","currentPos","rtl","onTouchMove","data","touches","push","position","isHorizontal","time","touchStartTime","wrapperEl","rtlTranslate","snapGrid","touchEndTime","timeDiff","minTranslate","slideTo","activeIndex","maxTranslate","slides","lastMoveEvent","pop","velocityEvent","distance","velocity","Math","abs","momentumDuration","momentumDistance","newPosition","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","allowMomentumBounce","loop","centeredSlides","nextSlide","j","swipeDirection","loopFix","moveDistance","currentSlideSize","slidesSizesGrid","speed","slideToClosest","updateProgress","transitionStart","animating","destroyed","setTimeout","transitionEnd","updateActiveIndex","updateSlidesClasses","longSwipesMs","Object","assign"],"mappings":"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","sourcesContent":["import { elementTransitionEnd, now } from '../../shared/utils.js';\nexport default function freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart() {\n    if (swiper.params.cssMode) return;\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove() {\n    if (swiper.params.cssMode) return;\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n  function onTouchEnd({\n    currentPos\n  }) {\n    if (swiper.params.cssMode) return;\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    // Time diff\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      }\n      // Fix duration\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}