{"ast":null,"code":"import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(value => value.stop());\n}\n/**\n * @public\n */\n\n\nfunction animationControls() {\n  /**\n   * Track whether the host component has mounted.\n   */\n  let hasMounted = false;\n  /**\n   * A collection of linked component animation controls.\n   */\n\n  const subscribers = new Set();\n  const controls = {\n    subscribe(visualElement) {\n      subscribers.add(visualElement);\n      return () => void subscribers.delete(visualElement);\n    },\n\n    start(definition, transitionOverride) {\n      invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      const animations = [];\n      subscribers.forEach(visualElement => {\n        animations.push(animateVisualElement(visualElement, definition, {\n          transitionOverride\n        }));\n      });\n      return Promise.all(animations);\n    },\n\n    set(definition) {\n      invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n      return subscribers.forEach(visualElement => {\n        setValues(visualElement, definition);\n      });\n    },\n\n    stop() {\n      subscribers.forEach(visualElement => {\n        stopAnimation(visualElement);\n      });\n    },\n\n    mount() {\n      hasMounted = true;\n      return () => {\n        hasMounted = false;\n        controls.stop();\n      };\n    }\n\n  };\n  return controls;\n}\n\nexport { animationControls };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs"],"names":["invariant","setValues","animateVisualElement","stopAnimation","visualElement","values","forEach","value","stop","animationControls","hasMounted","subscribers","Set","controls","subscribe","add","delete","start","definition","transitionOverride","animations","push","Promise","all","set","mount"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,oBAAT,QAAqC,kCAArC;;AAEA,SAASC,aAAT,CAAuBC,aAAvB,EAAsC;AAClCA,EAAAA,aAAa,CAACC,MAAd,CAAqBC,OAArB,CAA8BC,KAAD,IAAWA,KAAK,CAACC,IAAN,EAAxC;AACH;AACD;AACA;AACA;;;AACA,SAASC,iBAAT,GAA6B;AACzB;AACJ;AACA;AACI,MAAIC,UAAU,GAAG,KAAjB;AACA;AACJ;AACA;;AACI,QAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,QAAMC,QAAQ,GAAG;AACbC,IAAAA,SAAS,CAACV,aAAD,EAAgB;AACrBO,MAAAA,WAAW,CAACI,GAAZ,CAAgBX,aAAhB;AACA,aAAO,MAAM,KAAKO,WAAW,CAACK,MAAZ,CAAmBZ,aAAnB,CAAlB;AACH,KAJY;;AAKba,IAAAA,KAAK,CAACC,UAAD,EAAaC,kBAAb,EAAiC;AAClCnB,MAAAA,SAAS,CAACU,UAAD,EAAa,iHAAb,CAAT;AACA,YAAMU,UAAU,GAAG,EAAnB;AACAT,MAAAA,WAAW,CAACL,OAAZ,CAAqBF,aAAD,IAAmB;AACnCgB,QAAAA,UAAU,CAACC,IAAX,CAAgBnB,oBAAoB,CAACE,aAAD,EAAgBc,UAAhB,EAA4B;AAC5DC,UAAAA;AAD4D,SAA5B,CAApC;AAGH,OAJD;AAKA,aAAOG,OAAO,CAACC,GAAR,CAAYH,UAAZ,CAAP;AACH,KAdY;;AAebI,IAAAA,GAAG,CAACN,UAAD,EAAa;AACZlB,MAAAA,SAAS,CAACU,UAAD,EAAa,+GAAb,CAAT;AACA,aAAOC,WAAW,CAACL,OAAZ,CAAqBF,aAAD,IAAmB;AAC1CH,QAAAA,SAAS,CAACG,aAAD,EAAgBc,UAAhB,CAAT;AACH,OAFM,CAAP;AAGH,KApBY;;AAqBbV,IAAAA,IAAI,GAAG;AACHG,MAAAA,WAAW,CAACL,OAAZ,CAAqBF,aAAD,IAAmB;AACnCD,QAAAA,aAAa,CAACC,aAAD,CAAb;AACH,OAFD;AAGH,KAzBY;;AA0BbqB,IAAAA,KAAK,GAAG;AACJf,MAAAA,UAAU,GAAG,IAAb;AACA,aAAO,MAAM;AACTA,QAAAA,UAAU,GAAG,KAAb;AACAG,QAAAA,QAAQ,CAACL,IAAT;AACH,OAHD;AAIH;;AAhCY,GAAjB;AAkCA,SAAOK,QAAP;AACH;;AAED,SAASJ,iBAAT","sourcesContent":["import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n"]},"metadata":{},"sourceType":"module"}