{"ast":null,"code":"export const processLazyPreloader = (swiper, imageEl) => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n\n  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n\n  const slideEl = imageEl.closest(slideSelector());\n\n  if (slideEl) {\n    const lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n    if (lazyEl) lazyEl.remove();\n  }\n};\n\nconst unlazy = (swiper, index) => {\n  if (!swiper.slides[index]) return;\n  const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n  if (imageEl) imageEl.removeAttribute('loading');\n};\n\nexport const preload = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  let amount = swiper.params.lazyPreloadPrevNext;\n  const len = swiper.slides.length;\n  if (!len || !amount || amount < 0) return;\n  amount = Math.min(amount, len);\n  const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n  const activeIndex = swiper.activeIndex;\n\n  if (swiper.params.grid && swiper.params.grid.rows > 1) {\n    const activeColumn = activeIndex;\n    const preloadColumns = [activeColumn - amount];\n    preloadColumns.push(...Array.from({\n      length: amount\n    }).map((_, i) => {\n      return activeColumn + slidesPerView + i;\n    }));\n    swiper.slides.forEach((slideEl, i) => {\n      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n    });\n    return;\n  }\n\n  const slideIndexLastInView = activeIndex + slidesPerView - 1;\n\n  if (swiper.params.rewind || swiper.params.loop) {\n    for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\n      const realIndex = (i % len + len) % len;\n      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n    }\n  } else {\n    for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\n      if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n        unlazy(swiper, i);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/swiper/shared/process-lazy-preloader.js"],"names":["processLazyPreloader","swiper","imageEl","destroyed","params","slideSelector","isElement","slideClass","slideEl","closest","lazyEl","querySelector","lazyPreloaderClass","remove","unlazy","index","slides","removeAttribute","preload","amount","lazyPreloadPrevNext","len","length","Math","min","slidesPerView","slidesPerViewDynamic","ceil","activeIndex","grid","rows","activeColumn","preloadColumns","push","Array","from","map","_","i","forEach","includes","column","slideIndexLastInView","rewind","loop","realIndex","max"],"mappings":"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","sourcesContent":["export const processLazyPreloader = (swiper, imageEl) => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n  const slideEl = imageEl.closest(slideSelector());\n  if (slideEl) {\n    const lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n    if (lazyEl) lazyEl.remove();\n  }\n};\nconst unlazy = (swiper, index) => {\n  if (!swiper.slides[index]) return;\n  const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n  if (imageEl) imageEl.removeAttribute('loading');\n};\nexport const preload = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  let amount = swiper.params.lazyPreloadPrevNext;\n  const len = swiper.slides.length;\n  if (!len || !amount || amount < 0) return;\n  amount = Math.min(amount, len);\n  const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n  const activeIndex = swiper.activeIndex;\n  if (swiper.params.grid && swiper.params.grid.rows > 1) {\n    const activeColumn = activeIndex;\n    const preloadColumns = [activeColumn - amount];\n    preloadColumns.push(...Array.from({\n      length: amount\n    }).map((_, i) => {\n      return activeColumn + slidesPerView + i;\n    }));\n    swiper.slides.forEach((slideEl, i) => {\n      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n    });\n    return;\n  }\n  const slideIndexLastInView = activeIndex + slidesPerView - 1;\n  if (swiper.params.rewind || swiper.params.loop) {\n    for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\n      const realIndex = (i % len + len) % len;\n      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n    }\n  } else {\n    for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\n      if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n        unlazy(swiper, i);\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}