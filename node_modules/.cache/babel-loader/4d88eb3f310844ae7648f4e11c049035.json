{"ast":null,"code":"import { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = visualElement.makeTargetAnimatable(definition);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...transition\n    };\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n\n      if (appearId) {\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n      }\n    }\n\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    const animation = value.animation;\n\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(() => willChange.remove(key));\n    }\n\n    animations.push(animation);\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"sources":["C:/Users/91800/Desktop/Personal-Portfolio-React-master/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"names":["frame","transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","definition","delay","transitionOverride","type","transition","getDefaultTransition","transitionEnd","target","makeTargetAnimatable","willChange","getValue","animations","animationTypeState","animationState","getState","value","valueTarget","undefined","valueTransition","elapsed","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all"],"mappings":"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","sourcesContent":["import { frame } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n"]},"metadata":{},"sourceType":"module"}